ARROW = {};ARROW.autoTest = false;ARROW.testParams = {"page":"testMock.html","lib":"/usr/local/lib/node_modules/arrow/lib/common/yui-arrow.js,test-lib.js","driver":"selenium","argv":{"remain":["test-func.js"],"cooked":["test-func.js","--page","testMock.html","--lib","test-lib.js","--driver","selenium"],"original":["test-func.js","--page=testMock.html","--lib=test-lib.js","--driver=selenium"]},"test":"test-func.js"};ARROW.appSeed = "http://yui.yahooapis.com/3.4.1/build/yui/yui-min.js";ARROW.testLibs = ["http://10.82.140.140:4459/arrow/static/usr/local/lib/node_modules/arrow/lib/common/yui-arrow.js","http://10.82.140.140:4459/arrow/static/Users/aiqin/cocktails/Arrow/Demos/func_test/test/test-lib.js"];ARROW.scriptType = "test";ARROW.testScript = "http://10.82.140.140:4459/arrow/static/Users/aiqin/cocktails/Arrow/Demos/func_test/test/test-func.js";ARROW.actionScript = "";ARROW.onSeeded = function() { /*jslint forin:true sub:true anon:true, sloppy:true, stupid:true nomen:true, node:true continue:true*/
/*jslint undef: true*/

/*
* Copyright (c) 2012, Yahoo! Inc.  All rights reserved.
* Copyrights licensed under the New BSD License.
* See the accompanying LICENSE file for terms.
*/

YUI({ useBrowserConsole: true }).use("get", function (Y) {

    function loadAction() {
        YUI({ useBrowserConsole: true }).use(ARROW.testBag, function (Y) {
            var action = Y.arrow ? Y.arrow.action : null;

            if (!action) {
                ARROW.actionReport = JSON.stringify({"error": "Could not find an action to execute"});
                return;
            }

            try {
                action.testParams = ARROW.testParams;

                action.setUp(function (error, data) {
                    var interval;

                    ARROW.actionReport = JSON.stringify({"error": error, "data": data});
                    if (error) { // we cannot execute the action
                        return;
                    }
                    // wait for the report to be collected before executing the action
                    // because actions are supposed to navigate away
                    interval = setInterval(function () {
                        if (ARROW.actionReported) {
                            clearInterval(interval);
                            action.execute();
                        }
                    }, 100);
                });
            } catch (ex) {
                ARROW.actionReport = JSON.stringify({"error": "Exception: " + ex});
            }
        });
    }

    function completeTest(testRunner) {
        var YTest = YUITest;

        testRunner = YTest.TestRunner;

        if (typeof navigator !== "undefined") {
            testRunner._root.results.ua = navigator.userAgent;
        }
        ARROW.testReport = testRunner.getResults(YTest.ResultsFormat.JSON);
        YUITest = undefined;
    }

    function runTest() {
        var YTest = YUITest,
            testRunner = YTest.TestRunner,
            i;

        function injectConfig(suites) {
            for (i = 0; i < suites.length; i += 1) {
                var suite = suites[i];
                suite.testParams = ARROW.testParams;
                if (suite.items) {
                    injectConfig(suite.items);
                }
            }
        }
        injectConfig(testRunner.masterSuite.items);

        testRunner.subscribe(testRunner.COMPLETE_EVENT, completeTest);
        testRunner.run();
    }

    function loadTest() {
        YUI({ useBrowserConsole: true }).use(ARROW.testBag, function (Y) {
            runTest();
        });
    }

    function autoTest() {
        var YTest = window.YUITest,
            testRunner;
        if (!YTest) {
            return window.setTimeout(autoTest, 50);
        }

        testRunner = YTest.TestRunner;
        if (testRunner._root && testRunner._root.results && "report" === testRunner._root.results.type) {
            completeTest();
        } else {
            testRunner.subscribe(testRunner.COMPLETE_EVENT, completeTest);
        }
    }

    function fetchAction(actionScript) {
        if (actionScript.length > 0) {
            Y.Get.script(actionScript, {
                onSuccess: function(o) { loadAction(); }
            });
        } else {
            loadAction();
        }
    }

    function fetchTest(testScript) {
        if (testScript.length > 0) {
            Y.Get.script(testScript, {
                onSuccess: function (o) { loadTest(); }
            });
        } else {
            loadTest();
        }
    }

    function fetchScript() {

        if (ARROW.scriptType) {
            if ("test" === ARROW.scriptType) {
                fetchTest(ARROW.testScript);
            } else {
                fetchAction(ARROW.actionScript);
            }
        } else {
            fetchTest(ARROW.testScript);
        }
    }

    if (ARROW.autoTest) {
        autoTest();
    } else if (ARROW.testLibs.length > 0) {
        Y.Get.script(ARROW.testLibs, {
            onSuccess: function(o) { fetchScript(); },
            async: false // TODO: could async true create dependency issue
        });
    } else {
        fetchScript();
    }
});

 };/*jslint forin:true sub:true undef: true anon:true, sloppy:true, stupid:true nomen:true, node:true continue:true*/
/*jslint undef: true*/
/*
* Copyright (c) 2012, Yahoo! Inc.  All rights reserved.
* Copyrights licensed under the New BSD License.
* See the accompanying LICENSE file for terms.
*/

// Provided by the fw
// ARROW = {};
// ARROW.autoTest = false; // for self contained app and test, such as html
// ARROW.testParams = {};
// ARROW.appSeed = ""; // YUI min or equivalent
// ARROW.testLibs = [];
// ARROW.scriptType = "test";
// ARROW.testScript = "test-file.js";
// ARROW.actionScript = "action-file.js";
// ARROW.onSeeded = function() { /* add test, hand over to runner */}

ARROW.testBag = ["test"];
ARROW.testReport = null;
ARROW.actionReport = null;
ARROW.actionReported = false;

// try to catch unhandled errors
if ((typeof window !== "undefined") && !window.onerror) {
    window.onerror = function (errorMsg, sourceUrl, lineNumber) {
        console.log("javascript error: " + errorMsg + " at " + lineNumber + ", url: " + sourceUrl);
        return true;
    };
}

(function () {

    function loadScript(url, callback) {
        var script = document.createElement("script");
        script.type = "text/javascript";

        if (script.readyState) { // IE
            script.onreadystatechange = function () {
                if (("loaded" === script.readyState) || ("complete" === script.readyState)) {
                    script.onreadystatechange = null;
                    callback();
                }
            };
        } else { // Others
            script.onload = function() {
                callback();
            };
        }

        script.src = url;
        document.body.appendChild(script);
    }

    function captureConsoleMessages() {

        try {
            if(console) {
                //capturing console log
                console.oldLog = console.log;
                console.log = function(line) {
                    ARROW.consoleLog += "[LOG] " + line + "\n";
                    console.oldLog(line);
                }

                //capturing console info
                console.oldInfo = console.info;
                console.info = function(line) {
                    ARROW.consoleLog += "[INFO] " + line + "\n";
                    console.oldInfo(line);
                }

                //capturing console warn
                console.oldWarn = console.warn;
                console.warn = function(line) {
                    ARROW.consoleLog += "[WARN] " + line + "\n";
                    console.oldWarn(line);
                }

                //capturing console debug
                console.oldDebug = console.debug;
                console.debug = function(line) {
                    ARROW.consoleLog += "[DEBUG] " + line + "\n";
                    console.oldDebug(line);
                }

                //capturing console debug
                console.oldError = console.error;
                console.error = function(line) {
                    ARROW.consoleLog += "[ERROR] " + line + "\n";
                    console.oldError(line);
                }
            }
        } catch (e){

        }

    }

    function onYUIAvailable() {
        var module = ARROW.testParams["module"],
            yuiAddFunc = YUI.add;

        //initializing Arrow console log
        ARROW.consoleLog = "";

        //capturing console messages
        captureConsoleMessages();

        // capture module style tests
        YUI.add = function (name, fn, version, meta) {
            yuiAddFunc(name, fn, version, meta);

            if (module && (name !== module)) {
                return;
            }

            if (("test" === ARROW.scriptType) && (-1 !== name.indexOf("-tests"))) {
                console.log("Found test module: " + name);
                ARROW.testBag.push(name);
            } else if (("action" === ARROW.scriptType) && (-1 !== name.indexOf("-action"))) {
                console.log("Found test action: " + name);
                ARROW.testBag.push(name);
            }
        };

        ARROW.onSeeded();
    }

    if (typeof YUI === "undefined") {
        if ((typeof process !== "undefined") && (typeof require !== "undefined")) {
            YUI = require("yui").YUI;
            onYUIAvailable();
        } else {
            loadScript(ARROW.appSeed, onYUIAvailable);
        }
    } else {
        onYUIAvailable();
    }
})();

